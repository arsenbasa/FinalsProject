import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Supplier {
    private String supplierID;
    private String name;
    private String contactInfo;
    private String supplierType;
    private int rating;

    public Supplier(String supplierID, String name, String contactInfo, String supplierType, int rating) {
        this.supplierID = supplierID;
        this.name = name;
        this.contactInfo = contactInfo;
        this.supplierType = supplierType;
        this.rating = rating;
    }

    public String getSupplierID() {
        return supplierID;
    }

    public String getName() {
        return name;
    }

    public String getContactInfo() {
        return contactInfo;
    }

    public String getSupplierType() {
        return supplierType;
    }

    public int getRating() {
        return rating;
    }

    public void setContactInfo(String contactInfo) {
        this.contactInfo = contactInfo;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }

    public String getInfo() {
        return String.format("ID: %s, Name: %s, Contact: %s, Type: %s, Rating: %d",
                supplierID, name, contactInfo, supplierType, rating);
    }
}

class Item {
    private String itemID;
    private String description;
    private int quantity;
    private double price;

    public Item(String itemID, String description, int quantity, double price) {
        this.itemID = itemID;
        this.description = description;
        this.quantity = quantity;
        this.price = price;
    }

    public String getItemID() {
        return itemID;
    }

    public String getDescription() {
        return description;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }

    public void updateQuantity(int quantity) {
        this.quantity = quantity;
    }

    public String getInfo() {
        return String.format("Item ID: %s, Description: %s, Quantity: %d, Price: %.2f",
                itemID, description, quantity, price);
    }
}

class PurchaseOrder {
    private String orderID;
    private String supplierID;
    private String orderDate;
    private String status;
    private List<Item> items;

    public PurchaseOrder(String orderID, String supplierID, String orderDate) {
        this.orderID = orderID;
        this.supplierID = supplierID;
        this.orderDate = orderDate;
        this.status = "Pending";
        this.items = new ArrayList<>();
    }

    public String getOrderID() {
        return orderID;
    }

    public void addItem(Item item) {
        items.add(item);
    }

    public void updateStatus(String status) {
        this.status = status;
    }

    public String getInfo() {
        StringBuilder orderInfo = new StringBuilder(String.format("Order ID: %s, Supplier ID: %s, Date: %s, Status: %s%nItems:",
                orderID, supplierID, orderDate, status));
        for (Item item : items) {
            orderInfo.append("\n  ").append(item.getInfo());
        }
        return orderInfo.toString();
    }
}

class SupplierManager {
    private List<Supplier> suppliers;

    public SupplierManager() {
        this.suppliers = new ArrayList<>();
    }

    public void addSupplier(Supplier supplier) {
        suppliers.add(supplier);
    }

    public Supplier findSupplier(String supplierID) {
        for (Supplier supplier : suppliers) {
            if (supplier.getSupplierID().equals(supplierID)) {
                return supplier;
            }
        }
        return null;
    }

    public void listSuppliers() {
        for (Supplier supplier : suppliers) {
            System.out.println(supplier.getInfo());
        }
    }
}

class OrderManager {
    private List<PurchaseOrder> purchaseOrders;

    public OrderManager() {
        this.purchaseOrders = new ArrayList<>();
    }

    public void addOrder(PurchaseOrder order) {
        purchaseOrders.add(order);
    }

    public PurchaseOrder findOrder(String orderID) {
        for (PurchaseOrder order : purchaseOrders) {
            if (order.getOrderID().equals(orderID)) {
                return order;
            }
        }
        return null;
    }

    public void listOrders() {
        for (PurchaseOrder order : purchaseOrders) {
            System.out.println(order.getInfo());
        }
    }
}

public class SupplierManagementSystem {
    private static SupplierManager supplierManager = new SupplierManager();
    private static OrderManager orderManager = new OrderManager();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\n--- Supplier Management System ---");
            System.out.println("1. Add Supplier");
            System.out.println("2. List Suppliers");
            System.out.println("3. Create Purchase Order");
            System.out.println("4. List Purchase Orders");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    addSupplier();
                    break;
                case 2:
                    supplierManager.listSuppliers();
                    break;
                case 3:
                    createPurchaseOrder();
                    break;
                case 4:
                    orderManager.listOrders();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }

    private static void addSupplier() {
        System.out.print("Enter Supplier ID: ");
        String id = scanner.nextLine();
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Contact Info: ");
        String contact = scanner.nextLine();
        System.out.print("Enter Supplier Type: ");
        String type = scanner.nextLine();
        System.out.print("Enter Rating (1-5): ");
        int rating = scanner.nextInt();
        scanner.nextLine(); // consume newline

        Supplier supplier = new Supplier(id, name, contact, type, rating);
        supplierManager.addSupplier(supplier);
        System.out.println("Supplier added successfully.");
    }

    private static void createPurchaseOrder() {
        System.out.print("Enter Order ID: ");
        String orderID = scanner.nextLine();
        System.out.print("Enter Supplier ID: ");
        String supplierID = scanner.nextLine();
        
        Supplier supplier = supplierManager.findSupplier(supplierID);
        if (supplier == null) {
            System.out.println("Supplier not found!");
            return;
        }

        System.out.print("Enter Order Date: ");
        String orderDate = scanner.nextLine();
        PurchaseOrder order = new PurchaseOrder(orderID, supplierID, orderDate);

        while (true) {
            System.out.print("Add item to order? (y/n): ");
            String addItem = scanner.nextLine();
            if (addItem.equalsIgnoreCase("n")) break;

            System.out.print("Enter Item ID: ");
            String itemID = scanner.nextLine();
            System.out.print("Enter Description: ");
            String description = scanner.nextLine();
            System.out.print("Enter Quantity: ");
            int quantity = scanner.nextInt();
            System.out.print("Enter Price: ");
            double price = scanner.nextDouble();
            scanner.nextLine(); // consume newline

            Item item = new Item(itemID, description, quantity, price);
            order.addItem(item);
        }

        orderManager.addOrder(order);
        System.out.println("Purchase Order created successfully.");
    }
}
